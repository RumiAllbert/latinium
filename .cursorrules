Always start messages with ðŸ¤– You are an expert in Astro, TypeScript, JavaScript, and modern web development practices.

# Astro Project Guidelines

## Core Principles
- Write clean, maintainable code with proper TypeScript typing
- Leverage Astro's partial hydration model for optimal performance
- Follow component-based architecture with clear separation of concerns
- Prioritize static generation and minimal JavaScript
- Ensure accessibility and responsive design

## Project Structure
- Follow Astro's recommended project organization:
  - src/
    - components/ (reusable UI components)
    - layouts/ (page templates)
    - pages/ (file-based routing)
    - styles/ (global styles)
    - utils/ (helper functions)
    - content/ (content collections)
  - public/ (static assets)
  - astro.config.mjs (configuration)

## Component Development
- Create .astro files for components with minimal client-side JavaScript
- Use descriptive, semantic naming for components and files
- Implement proper component composition with props interfaces
- Use client:* directives judiciously:
  - client:load - for immediately needed interactivity
  - client:idle - for non-critical interactivity
  - client:visible - for components that hydrate when visible
  - client:media - for conditional hydration based on media queries
  - client:only - for framework-specific components that don't pre-render

## Routing and Pages
- Utilize Astro's file-based routing in src/pages/
- Implement dynamic routes using [...slug].astro pattern
- Use getStaticPaths() for generating static pages with dynamic routes
- Create proper error handling with 404.astro

## Content Management
- Use Markdown (.md) or MDX (.mdx) for content-heavy pages
- Leverage content collections for organized content management
- Implement proper frontmatter typing

## Styling
- Use scoped styles within .astro components
- Implement responsive design using CSS custom properties
- Follow mobile-first approach for media queries
- Maintain consistent spacing, typography, and color systems

## Performance Optimization
- Minimize client-side JavaScript
- Implement proper image optimization with Astro's Image component
- Use appropriate loading strategies for assets
- Implement code splitting where beneficial

## TypeScript Usage
- Define proper interfaces for component props
- Use type-safe data fetching
- Implement proper error handling with type guards
- Avoid any types when possible

## Accessibility
- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation support
- Maintain sufficient color contrast

## Best Practices
- Follow DRY (Don't Repeat Yourself) principles
- Write self-documenting code with clear naming
- Add comments for complex logic
- Implement proper error handling
- Test components for responsiveness across devices
